import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import type { TrainingProgramPublic } from "../../types/TrainingProgram";

// Helper function ƒë·ªÉ format academic rank
const getAcademicRank = (rank: string | undefined): string => {
  const rankMap: { [key: string]: string } = {
    "PROFESSOR": "Gi√°o s∆∞",
    "ASSOCIATE_PROFESSOR": "Ph√≥ Gi√°o s∆∞",
    "DOCTOR": "Ti·∫øn sƒ©", 
    "MASTER": "Th·∫°c sƒ©",
    "BACHELOR": "C·ª≠ nh√¢n",
    "ENGINEER": "K·ªπ s∆∞",
    "OTHER": "Kh√°c"
  };
  return rankMap[rank || ""] || rank || "";
};

// Custom hook ƒë·ªÉ l·∫•y chi ti·∫øt training program t·ª´ danh s√°ch ƒë√£ c√≥
function useTrainingProgramDetail(
  programId: string,
  trainingPrograms: TrainingProgramPublic[],
) {
  const [program, setProgram] = useState<TrainingProgramPublic | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const findProgramDetail = () => {
      try {
        setLoading(true);
        setError(null);

        // Ki·ªÉm tra programId h·ª£p l·ªá
        if (!programId || !programId.trim()) {
          console.error("‚ùå Invalid program ID:", programId);
          setError("ID ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o kh√¥ng h·ª£p l·ªá");
          return;
        }

        console.log(
          "üîç Finding training program detail for ID:",
          programId,
          "in programs:",
          trainingPrograms.length,
        );

        // T√¨m training program trong danh s√°ch ƒë√£ c√≥ (so s√°nh string)
        const foundProgram = trainingPrograms.find((p) => p.id === programId);

        if (foundProgram) {
          console.log("‚úÖ Found training program:", foundProgram.title);
          setProgram(foundProgram);
        } else {
          console.warn(
            "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o trong danh s√°ch, s·ª≠ d·ª•ng mock data",
          );
        }
      } catch (err: any) {
        console.error("‚ùå L·ªói khi t√¨m ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o:", err);
        setError("Kh√¥ng th·ªÉ t√¨m th·∫•y ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o");
      } finally {
        setLoading(false);
      }
    };

    if (programId && trainingPrograms.length > 0) {
      findProgramDetail();
    }
  }, [programId, trainingPrograms]);

  return { program, loading, error };
}

interface TrainingProgramDetailPublicDialogProps {
  programId: string;
  isOpen: boolean;
  onClose: () => void;
}

const TrainingProgramDetailPublicDialog = ({
  programId,
  isOpen,
  onClose,
}: TrainingProgramDetailPublicDialogProps) => {
  const trainingPrograms = useSelector((state: any) => state.trainingProgramPublic);
  const { program, loading, error } = useTrainingProgramDetail(
    programId,
    trainingPrograms,
  );

  if (!isOpen) return null;

  // Handle click outside to close
  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  if (loading) {
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
        <div className="w-full max-w-6xl max-h-[90vh] overflow-hidden rounded-xl bg-white shadow-xl">
          <div className="p-6">
            <div className="flex items-center justify-between border-b pb-4">
              <h2 className="text-xl font-semibold">Chi ti·∫øt ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o</h2>
              <button
                onClick={onClose}
                className="rounded-lg border border-gray-300 bg-white p-2 text-gray-500 hover:bg-gray-50"
              >
                ‚úï
              </button>
            </div>
            <div className="flex justify-center py-12">
              <div className="h-12 w-12 animate-spin rounded-full border-b-2 border-indigo-600"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !program) {
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50" onClick={handleBackdropClick}>
        <div className="w-full max-w-6xl max-h-[90vh] overflow-hidden rounded-xl bg-white shadow-xl">
          <div className="p-6">
            <div className="flex items-center justify-between border-b pb-4">
              <h2 className="text-xl font-semibold">Chi ti·∫øt ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o</h2>
              <button
                onClick={onClose}
                className="rounded-lg border border-gray-300 bg-white p-2 text-gray-500 hover:bg-gray-50"
              >
                ‚úï
              </button>
            </div>
            <div className="py-12 text-center text-red-600">
              <p>{error || "Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o"}</p>
              <button
                onClick={onClose}
                className="mt-4 rounded-xl bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700"
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50" onClick={handleBackdropClick}>
      <div className="w-full max-w-6xl max-h-[90vh] overflow-y-auto rounded-xl bg-white shadow-xl">
        {/* Header */}
        <div className="bg-gradient-to-br from-indigo-700 to-sky-500 text-white">
          <div className="p-6">
            <div className="flex items-center justify-between">
              <button
                onClick={onClose}
                className="rounded-lg border border-white/30 bg-white/10 px-3 py-1.5 text-sm hover:bg-white/20"
              >
                ‚Üê ƒê√≥ng
              </button>
            </div>
            <div className="mt-6 grid items-center gap-8 md:grid-cols-2">
              <img
                src={program.bannerUrl || "https://via.placeholder.com/400x225"}
                alt={program.title}
                className="w-full rounded-2xl shadow-lg"
              />
              <div>
                <h1 className="text-3xl font-extrabold">
                  {program.title || "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o"}
                </h1>

                <div className="mt-4 flex flex-wrap gap-3 text-sm">
                  <span className="rounded-full border border-white/30 bg-white/15 px-3 py-1">
                    Th·ªùi l∆∞·ª£ng: {program.durationHours || 0} gi·ªù
                  </span>
                  <span className="rounded-full border border-white/30 bg-white/15 px-3 py-1">
                    Bu·ªïi h·ªçc: {program.durationSessions || 0} bu·ªïi
                  </span>
                  {program.rating && (
                    <span className="rounded-full border border-white/30 bg-white/15 px-3 py-1">
                      ‚≠ê {program.rating.toFixed(2)}
                    </span>
                  )}
                </div>
                <div className="mt-6 flex items-center gap-4">
                  <div className="text-2xl font-extrabold">
                    {program.publicPrice && program.priceVisible
                      ? program.publicPrice.toLocaleString("vi-VN") + " ƒë"
                      : "Li√™n h·ªá"}
                  </div>
                  <button className="h-11 rounded-xl bg-amber-500 px-5 font-semibold text-white hover:bg-amber-600 transition-colors">
                    ƒêƒÉng k√Ω ch∆∞∆°ng tr√¨nh
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          <div className="grid gap-8 md:grid-cols-3">
            <div className="md:col-span-2">
              <h2 className="text-xl font-bold">Danh s√°ch b√†i h·ªçc</h2>

              {/* Danh s√°ch units t·ª´ training program */}
              {program.units && program.units.length > 0 ? (
                <ul className="mt-4 space-y-3 text-sm">
                  {program.units
                    .slice() // t·∫°o b·∫£n sao ƒë·ªÉ tr√°nh mutate d·ªØ li·ªáu g·ªëc
                    .sort((a: any, b: any) => a.orderSection - b.orderSection)
                    .map((unit: any, index: number) => (
                      <li
                        key={unit.id || index}
                        className="rounded-xl border bg-white p-3 shadow"
                      >
                        <div className="font-semibold">
                          {unit.orderSection}.{" "}
                          {unit.title || unit.name || `B√†i h·ªçc ${index + 1}`}
                        </div>
                        {unit.description && (
                          <div className="mt-1 text-gray-600">
                            {unit.description}
                          </div>
                        )}
                        <div className="mt-2 flex flex-wrap gap-2 text-xs">
                          {unit.durationHours && (
                            <span className="rounded bg-blue-50 px-2 py-1 text-blue-700">
                              ‚è±Ô∏è {unit.durationHours} gi·ªù
                            </span>
                          )}
                          {unit.lecturer && (
                            <span className="rounded bg-green-50 px-2 py-1 text-green-700">
                              üë®‚Äçüè´ {unit.lecturer.fullName}
                            </span>
                          )}
                          {unit.isLead && (
                            <span className="rounded bg-amber-50 px-2 py-1 text-amber-700">
                              ‚≠ê B√†i h·ªçc ch√≠nh
                            </span>
                          )}
                        </div>
                      </li>
                    ))}
                </ul>
              ) : (
                /* Fallback content n·∫øu kh√¥ng c√≥ units */
                <ul className="mt-4 space-y-3 text-sm">
                  <li className="rounded-xl border bg-white p-3 shadow">
                    <div className="font-semibold">
                      B√†i 1: Gi·ªõi thi·ªáu t·ªïng quan
                    </div>
                    <div className="mt-1 text-gray-600">
                      T√¨m hi·ªÉu v·ªÅ n·ªÅn t·∫£ng v√† ki·∫øn th·ª©c c∆° b·∫£n
                    </div>
                  </li>
                  <li className="rounded-xl border bg-white p-3 shadow">
                    <div className="font-semibold">
                      B√†i 2: Th·ª±c h√†nh v√† ·ª©ng d·ª•ng
                    </div>
                    <div className="mt-1 text-gray-600">
                      √Åp d·ª•ng ki·∫øn th·ª©c v√†o c√°c b√†i t·∫≠p th·ª±c t·∫ø
                    </div>
                  </li>
                  <li className="rounded-xl border bg-white p-3 shadow">
                    <div className="font-semibold">B√†i 3: D·ª± √°n cu·ªëi kh√≥a</div>
                    <div className="mt-1 text-gray-600">
                      Ho√†n th√†nh d·ª± √°n t·ªïng h·ª£p ƒë·ªÉ ƒë√°nh gi√° nƒÉng l·ª±c
                    </div>
                  </li>
                </ul>
              )}

              {/* Chu·∫©n ƒë·∫ßu ra */}
              {program.learningOutcomes && (
                <div className="mt-6">
                  <h3 className="mb-2 text-lg font-semibold">Chu·∫©n ƒë·∫ßu ra</h3>
                  <div className="whitespace-pre-line leading-relaxed text-gray-700">
                    {program.learningOutcomes}
                  </div>
                </div>
              )}
            </div>

            <aside>
              {/* Th√¥ng tin ch∆∞∆°ng tr√¨nh */}
              <div className="rounded-xl border bg-gray-50 p-4">
                <h3 className="mb-4 text-xl font-bold">Th√¥ng tin ch∆∞∆°ng tr√¨nh</h3>
                <ul className="space-y-2 text-sm text-gray-700">
                  {program.programMode && (
                    <li>
                      <strong>H√¨nh th·ª©c:</strong> {program.programMode}
                    </li>
                  )}

                  {program.startDate && (
                    <li>
                      <strong>Ng√†y b·∫Øt ƒë·∫ßu:</strong>{" "}
                      {new Date(program.startDate).toLocaleDateString("vi-VN")}
                    </li>
                  )}

                  {program.endDate && (
                    <li>
                      <strong>Ng√†y k·∫øt th√∫c:</strong>{" "}
                      {new Date(program.endDate).toLocaleDateString("vi-VN")}
                    </li>
                  )}

                  {program.durationHours && (
                    <li>
                      <strong>Th·ªùi l∆∞·ª£ng:</strong> {program.durationHours} gi·ªù
                    </li>
                  )}
                  {program.durationSessions && (
                    <li>
                      <strong>S·ªë bu·ªïi h·ªçc:</strong> {program.durationSessions}{" "}
                      bu·ªïi
                    </li>
                  )}
                </ul>
              </div>

              {/* ƒê·ªëi t∆∞·ª£ng tham gia */}
              {program.targetAudience && (
                <div className="mt-6">
                  <h3 className="text-xl font-bold">ƒê·ªëi t∆∞·ª£ng tham gia</h3>
                  <div className="mt-4 whitespace-pre-line text-sm leading-relaxed text-gray-700">
                    {program.targetAudience}
                  </div>
                </div>
              )}

              {/* Y√™u c·∫ßu */}
              {program.requirements && (
                <div className="mt-6">
                  <h3 className="text-xl font-bold">Y√™u c·∫ßu</h3>
                  <div className="mt-4 whitespace-pre-line text-sm leading-relaxed text-gray-700">
                    {program.requirements}
                  </div>
                </div>
              )}

              {/* Gi·∫£ng vi√™n */}
              {program.units && program.units.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-xl font-bold">Gi·∫£ng vi√™n</h3>
                  <div className="mt-4 space-y-3">
                    {(() => {
                      // L·ªçc v√† ph√¢n lo·∫°i gi·∫£ng vi√™n t·ª´ c√°c unit
                      const lecturerMap = new Map();

                      program.units.forEach((unit: any) => {
                        if (unit.lecturer && unit.lecturer.id) {
                          const lecturerId = unit.lecturer.id;
                          const existingLecturer = lecturerMap.get(lecturerId);

                          if (!existingLecturer) {
                            // Th√™m gi·∫£ng vi√™n m·ªõi
                            lecturerMap.set(lecturerId, {
                              ...unit.lecturer,
                              isLead: unit.isLead || false,
                              units: [unit.title || unit.name],
                            });
                          } else {
                            // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu l√† lead ho·∫∑c th√™m unit
                            existingLecturer.isLead =
                              existingLecturer.isLead || unit.isLead || false;
                            if (unit.title || unit.name) {
                              existingLecturer.units.push(
                                unit.title || unit.name,
                              );
                            }
                          }
                        }
                      });

                      // Chuy·ªÉn th√†nh array v√† s·∫Øp x·∫øp (lead lecturer l√™n ƒë·∫ßu)
                      const uniqueLecturers = Array.from(
                        lecturerMap.values(),
                      ).sort((a, b) => {
                        if (a.isLead && !b.isLead) return -1;
                        if (!a.isLead && b.isLead) return 1;
                        return 0;
                      });

                      return uniqueLecturers.map(
                        (lecturer: any, index: number) => (
                          <div
                            key={lecturer.id || index}
                            className="flex items-start gap-3 rounded-xl border-l-4 border-l-blue-500 bg-white p-3 shadow"
                          >
                            <img
                              src={
                                lecturer.avatarUrl ||
                                "https://via.placeholder.com/48x48"
                              }
                              alt={lecturer.fullName}
                              className="h-12 w-12 flex-shrink-0 rounded-lg object-cover"
                            />
                            <div className="min-w-0 flex-1">
                              <div className="flex items-center gap-2">
                                <div className="truncate text-sm font-semibold">
                                  {lecturer.fullName || "Gi·∫£ng vi√™n"}
                                </div>
                                {lecturer.isLead && (
                                  <span className="rounded bg-amber-50 px-2 py-0.5 text-xs font-medium text-amber-700">
                                    Ch√≠nh
                                  </span>
                                )}
                              </div>
                              <div className="mt-1 text-xs text-gray-500">
                                {getAcademicRank(lecturer.academicRank)}
                                {lecturer.specialization &&
                                  ` ‚Ä¢ ${lecturer.specialization}`}
                              </div>

                              {lecturer.experienceYears && (
                                <div className="mt-1 text-xs text-gray-500">
                                  {lecturer.experienceYears} nƒÉm kinh nghi·ªám
                                </div>
                              )}
                            </div>
                          </div>
                        ),
                      );
                    })()}
                  </div>
                </div>
              )}

              {/* Tags */}
              {program.tags && program.tags.length > 0 && (
                <div className="mt-6">
                  <h3 className="text-xl font-bold">Tags</h3>
                  <div className="mt-4 flex flex-wrap gap-2">
                    {program.tags.map((tag: string, index: number) => (
                      <span
                        key={index}
                        className="rounded border border-blue-300 bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </aside>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TrainingProgramDetailPublicDialog;
